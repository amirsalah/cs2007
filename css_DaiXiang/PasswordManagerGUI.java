/*
 * PasswordManagerGUI.java
 *
 * 
 */


import java.io.*;
import java.security.spec.InvalidKeySpecException;
import javax.crypto.*;
import java.security.*;
import javax.crypto.spec.*;

/**
 *
 * @author  Xiang Dai (1108866)
 */
public class PasswordManagerGUI extends javax.swing.JFrame {
    
    /** Creates new form PasswordManagerGUI */
    String key = null;
    public PasswordManagerGUI(String ukey) {
        initComponents();
        setSize(350,300);
        key = ukey;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPassword = new javax.swing.JPasswordField();
        jBtnSave = new javax.swing.JButton();
        jBtnReset = new javax.swing.JButton();
        jLblName = new javax.swing.JLabel();
        jLblUsername = new javax.swing.JLabel();
        jLblPassword = new javax.swing.JLabel();
        jTxtUsername = new javax.swing.JTextField();
        jTxtName = new javax.swing.JTextField();

        getContentPane().setLayout(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Password Manager");
        getContentPane().add(jPassword);
        jPassword.setBounds(130, 120, 150, 20);

        jBtnSave.setText("Save");
        jBtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSaveActionPerformed(evt);
            }
        });
        jBtnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBtnSaveMouseClicked(evt);
            }
        });

        getContentPane().add(jBtnSave);
        jBtnSave.setBounds(50, 180, 100, 25);

        jBtnReset.setText("Reset");
        jBtnReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBtnResetMouseClicked(evt);
            }
        });

        getContentPane().add(jBtnReset);
        jBtnReset.setBounds(170, 180, 100, 25);

        jLblName.setText("Description");
        getContentPane().add(jLblName);
        jLblName.setBounds(40, 40, 70, 15);

        jLblUsername.setText("Username");
        getContentPane().add(jLblUsername);
        jLblUsername.setBounds(40, 80, 70, 15);

        jLblPassword.setText("Password");
        getContentPane().add(jLblPassword);
        jLblPassword.setBounds(40, 120, 80, 15);

        getContentPane().add(jTxtUsername);
        jTxtUsername.setBounds(130, 80, 150, 21);

        getContentPane().add(jTxtName);
        jTxtName.setBounds(130, 40, 150, 21);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnResetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnResetMouseClicked
        jTxtName.setText("");
        jTxtUsername.setText("");
        jPassword.setText("");
    }//GEN-LAST:event_jBtnResetMouseClicked

    private void jBtnSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnSaveMouseClicked
        File f = new File("account.pm");
        if (f.exists() == false)
        {
            try {
                f.createNewFile();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
//        encrypt(jTxtName.getText()+";"+jTxtUsername.getText()+";"+jPassword.getText()+"\n");
        decrypt();
    }//GEN-LAST:event_jBtnSaveMouseClicked

    private void jBtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSaveActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jBtnSaveActionPerformed
    
    private void encrypt(String text)
    {
        SecretKey secretKey = null;
        
        try {
            DESKeySpec keySpec = new DESKeySpec( key.getBytes() );
            SecretKeyFactory keyFac = SecretKeyFactory.getInstance( "DES" );
            secretKey = keyFac.generateSecret( keySpec );
        } catch (InvalidKeyException ex) {
            ex.printStackTrace();
        } catch (InvalidKeySpecException ex) {
            ex.printStackTrace();
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        try {
            Cipher cipher = Cipher.getInstance("DES");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            FileOutputStream fos = new FileOutputStream("account.pm",true);
            CipherOutputStream cos = new CipherOutputStream(fos,cipher);
            cos.write(text.getBytes());
            cos.close();
            fos.close();
        } catch (InvalidKeyException ex) {
            ex.printStackTrace();
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        } catch (NoSuchPaddingException ex) {
            ex.printStackTrace();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
    private void decrypt()
    {
        SecretKey secretKey = null;
        
        try {
            DESKeySpec keySpec = new DESKeySpec( key.getBytes() );
            SecretKeyFactory keyFac = SecretKeyFactory.getInstance( "DES" );
            secretKey = keyFac.generateSecret( keySpec );
        } catch (InvalidKeyException ex) {
            ex.printStackTrace();
        } catch (InvalidKeySpecException ex) {
            ex.printStackTrace();
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        try {
            Cipher cipher = Cipher.getInstance("DES");
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            FileInputStream fis = new FileInputStream("account.pm");
            CipherInputStream cis = new CipherInputStream(fis,cipher);
            FileOutputStream xfos = new FileOutputStream("plaintext.pm");
            int text = cis.read();
            while (text != -1)
            {
                xfos.write(text);
                text = cis.read();
            }
            xfos.close();
            fis.close();
            cis.close();
        } catch (InvalidKeyException ex) {
            ex.printStackTrace();
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        } catch (NoSuchPaddingException ex) {
            ex.printStackTrace();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PasswordManagerGUI("Password").setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnReset;
    private javax.swing.JButton jBtnSave;
    private javax.swing.JLabel jLblName;
    private javax.swing.JLabel jLblPassword;
    private javax.swing.JLabel jLblUsername;
    private javax.swing.JPasswordField jPassword;
    private javax.swing.JTextField jTxtName;
    private javax.swing.JTextField jTxtUsername;
    // End of variables declaration//GEN-END:variables
}
